from django.test import TestCase
from partcatalog.importers.json_importer import json_importer
from manufacturers.models import Manufacturer
from partcatalog.models.part import Part
from partcatalog.models.diode import Diode
from decimal import Decimal


class DiodeJsonImportTest(TestCase):
    @classmethod
    def setUpTestData(cls):
        Part.objects.all().delete()

        manufacturer = Manufacturer(name="TestDiodeManufacturer", full_name="TestDiodeManufacturer")
        manufacturer.save()

        # Set up non-modified objects used by all test methods
        json_importer.parts_import('partcatalog/importers/test_data/json/test_diodes.json')
        json_importer.run(dry=False)

    def test_imported_part(self):
        parts = Diode.objects.all()
        self.assertEqual(len(parts), 1)
        part = parts[0]
        self.assertEqual(part.part_type, 'D')
        self.assertEqual(part.manufacturer_part_number, "TESTDIODE#")
        self.assertEqual(part.manufacturer.name, "TestDiodeManufacturer")
        self.assertEqual(part.series, 'TestDiodeSeries')
        self.assertEqual(part.series_description, 'Test Diode Series')
        self.assertEqual(part.description, 'Small Signal Diode, 1A, 600V')
        self.assertEqual(part.production_status, 'UNK')
        self.assertEqual(part.device_marking_code, None)
        self.assertEqual(part.notes, None)
        self.assertEqual(part.comment, None)
        self.assertEqual(part.product_url, None)
        self.assertEqual(part.storage_conditions.temperature_min, -55)
        self.assertEqual(part.storage_conditions.temperature_max, 150)
        self.assertEqual(part.storage_conditions.humidity_min, None)
        self.assertEqual(part.storage_conditions.humidity_max, None)
        self.assertEqual(part.storage_conditions.msl_level, 1)
        self.assertEqual(part.symbol.name, 'diode')
        #self.assertEqual(part.files,)
        self.assertEqual(part.forward_voltage_1.min, None)
        self.assertEqual(part.forward_voltage_1.typ, None)
        self.assertEqual(part.forward_voltage_1.max, Decimal('1.7'))
        self.assertEqual(part.forward_voltage_1.at_junction_temp, 25)
        self.assertEqual(part.forward_voltage_1.at_forward_current, 1)
        self.assertEqual(part.forward_voltage_2.min, None)
        self.assertEqual(part.forward_voltage_2.typ, None)
        self.assertEqual(part.forward_voltage_2.max, None)
        self.assertEqual(part.forward_voltage_2.at_junction_temp, None)
        self.assertEqual(part.forward_voltage_2.at_forward_current, None)
        self.assertEqual(part.forward_voltage_3.min, None)
        self.assertEqual(part.forward_voltage_3.typ, None)
        self.assertEqual(part.forward_voltage_3.max, None)
        self.assertEqual(part.forward_voltage_3.at_junction_temp, None)
        self.assertEqual(part.forward_voltage_3.at_forward_current, None)
        self.assertEqual(part.forward_voltage_4.min, None)
        self.assertEqual(part.forward_voltage_4.typ, None)
        self.assertEqual(part.forward_voltage_4.max, None)
        self.assertEqual(part.forward_voltage_4.at_junction_temp, None)
        self.assertEqual(part.forward_voltage_4.at_forward_current, None)
        self.assertEqual(part.reverse_current_1.max, Decimal('0.000001'))
#        self.assertEqual(part.reverse_current_1.at_junction_temp, 25)
        self.assertEqual(part.reverse_current_1.at_reverse_voltage, 1000)
        self.assertEqual(part.reverse_current_2.max, Decimal('0.00002'))
#        self.assertEqual(part.reverse_current_2.at_junction_temp, 125)
        self.assertEqual(part.reverse_current_2.at_reverse_voltage, 1000)
        self.assertEqual(part.reverse_current_3.max, None)
        self.assertEqual(part.reverse_current_3.at_junction_temp, None)
        self.assertEqual(part.reverse_current_3.at_reverse_voltage, None)
        self.assertEqual(part.reverse_current_4.max, None)
        self.assertEqual(part.reverse_current_4.at_junction_temp, None)
        self.assertEqual(part.reverse_current_4.at_reverse_voltage, None)
        self.assertEqual(part.reverse_current_5.max, None)
        self.assertEqual(part.reverse_current_5.at_junction_temp, None)
        self.assertEqual(part.reverse_current_5.at_reverse_voltage, None)
        self.assertEqual(part.reverse_current_6.max, None)
        self.assertEqual(part.reverse_current_6.at_junction_temp, None)
        self.assertEqual(part.reverse_current_6.at_reverse_voltage, None)
        self.assertEqual(part.capacitance_in_pf.min, None)
        self.assertEqual(part.capacitance_in_pf.typ, 10)
        self.assertEqual(part.capacitance_in_pf.max, None)
        self.assertEqual(part.capacitance_in_pf.at_frequency, 1000000)
        self.assertEqual(part.capacitance_in_pf.at_reverse_voltage, 4)
        self.assertEqual(part.forward_continuous_current.min, None)
        self.assertEqual(part.forward_continuous_current.typ, 1)
        self.assertEqual(part.forward_continuous_current.max, None)
        self.assertEqual(part.repetitive_peak_forward_current.min, None)
        self.assertEqual(part.repetitive_peak_forward_current.typ, 10)
        self.assertEqual(part.repetitive_peak_forward_current.max, None)
        self.assertEqual(part.peak_forward_surge_current.min, None)
        self.assertEqual(part.peak_forward_surge_current.typ, 30)
        self.assertEqual(part.peak_forward_surge_current.max, None)
        self.assertEqual(part.power_rating.min, None)
        self.assertEqual(part.power_rating.typ, 1)
        self.assertEqual(part.power_rating.max, None)
        self.assertEqual(part.breakdown_voltage.min, None)
        self.assertEqual(part.breakdown_voltage.typ, 1000)
        self.assertEqual(part.breakdown_voltage.max, None)
        self.assertEqual(part.breakdown_voltage.at_reverse_current_uA, None)
        self.assertEqual(part.reverse_recovery_time_in_ns.min, None)
        self.assertEqual(part.reverse_recovery_time_in_ns.typ, Decimal('0.000000035'))
        self.assertEqual(part.reverse_recovery_time_in_ns.max, None)
        self.assertEqual(part.repetitive_peak_reverse_voltage.min, None)
        self.assertEqual(part.repetitive_peak_reverse_voltage.typ, 600)
        self.assertEqual(part.repetitive_peak_reverse_voltage.max, None)
        self.assertEqual(part.repetitive_peak_reverse_voltage.at_temp, 25)
        self.assertEqual(part.reverse_voltage.min, None)
        self.assertEqual(part.reverse_voltage.typ, 1000)
        self.assertEqual(part.reverse_voltage.max, None)
        self.assertEqual(part.reverse_voltage.at_temp, 25)
